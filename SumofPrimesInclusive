import java.util.Scanner;
class TestClass {
   
    static int N = 1000;
 
    // Declare an array for dynamic approach
    static long dp[] = new long[N + 1];
 
    // Method to compute the array
    static void compute()
    {
        // Declare an extra array as arr
        int arr[] = new int[N + 1];
        arr[0] = 1;
        arr[1] = 1;
 
        // Iterate the loop till sqrt(n)
        // Time Complexity is O(log(n) X sqrt(n))
        for (int i = 2; i <= Math.sqrt(N); i++)
 
            
            if (arr[i] == 0)
 
               
                for (int j = i * i; j <= N; j += i)
                    arr[j] = 1;
 
        long primesum= 0;
 
        // Update the array 'dp' with the running sum
        // of prime numbers within the range [1, N]
        // Time Complexity is O(n)
        for (int i = 1; i <= N; i++) {
            if (arr[i] == 0)
                rprimesum += i;
 
            //Here, dp[i] is the sum of all the prime numbers
            //within the range [1, i]
            dp[i] = primesum;
        }
    }
    public static void main(String args[] ) throws Exception {
      Scanner in = new Scanner(System.in);
        int testCases = Integer.parseInt(in.next());
        //System.out.println(testCases);
    while(testCases>0){
            int l = in.nextInt();
            int r=in.nextInt();
            //System.out.println(l+ " "+r);
        compute();
        System.out.println(dp[r] - dp[l - 1]);
testCases--;
    }
}
    }
